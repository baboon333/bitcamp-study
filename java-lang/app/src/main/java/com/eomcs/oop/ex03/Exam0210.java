// 인스턴스 메서드와 클래스 메서드
//
package com.eomcs.oop.ex03;

public class Exam0210 {
  static class A {
    //1) 클래스 메서드 = static 메서드
    //   => static 붙은 메서드이다.
    //   => 클래스 이름으로 호출할 수 있다.
    static void m1() {
      System.out.println("m1()");
    }

    //2) 인스턴스 메서드 = non-static 메서드
    //   => static 이 붙지 않은 메서드이다.
    //   => 인스턴스 주소가 있어야만 호출할 수 있다.
    //   => 모든 인스턴스 변수는 this라는 내장 변수가 존재한다. 
    void m2() {
      System.out.println("m2()");
    }
  }

  public static void main(String[] args) {
    // 클래스 메서드 호출
    // 문법) 클래스명.메서드명();
    A.m1(); // OK!

    // => 인스턴스 메서드는 클래스 이름으로 호출할 수 없다. 인스턴스 주소를 줘야 한다.
    //    A.m2(); // 컴파일 오류!

    A obj1 = new A();

    obj1.m1(); // OK! 그런데, 이렇게 하지 말라!
    // 물론 "클래스 메서드"를 인스턴스 주소를 사용하여 호출할 수 있지만,
    // 다른 개발자가 그냥 "인스턴스 메서드"인 줄 착각할 수 있기 때문에
    // 이렇게 호출하지 말기를 권고한다!  // 자바에서도 경고를 띄운다!
    obj1.m2(); // OK! 인스턴스 메서드는 반드시 인스턴스 주소를 사용하여 호출해야 한다. // 이 메서드의 this라는 변수에 전달된다! 따라서 m2가 실행되는 동안 this에 obj 주소가 들어감!!

    A obj2 = null;  // A 클래스 설계도에 따라 만들어진 인스턴스의 주소를 담는 변수에 주소가 없다는 걸 넘기는 거임!
    obj2.m2(); // 컴파일은 OK! 실행은 오류! this라는 변수에 유효하지 않은 주소가 들어갔기 때문! 왜냐면 obj = null로 주소가 없는 상태이기 때문에 이 메서드의 this라는 변수에 null값이 전달되어서 m2()의 this에는 null값이 들어가니!!! 
    // 왜? obj2 변수에 들어 있는 인스턴스 주소가 무효하기 때문이다.  // null pointerexception 오류가 발생한다면? (초보 때 가장 많이 만나는 오류 -> 인스턴스 메서드에 접근하려면 유효한 인스턴스 주소가 있어야되는데 그게 null이란걸 알아야 함!!)
  }
}

// 결론!
// 클래스 메서드(=스태틱 메서드)
// => 인스턴스 변수를 사용하지 않을 경우 클래스 메서드로 선언하라!
// 인스턴스 메서드
// => 인스턴스 변수를 사용할 경우 인스턴스 메서드로 선언하라!
//
// 실무
// => 일단 인스턴스 메서드로 무조건 만들라!
// => 인스턴스 변수를 완전히 사용하지 않음을 확신하면 
//    그 때 클래스 메서드로 전환하라!
//    자기가 속한 클래스에서 인스턴스 변수를 사용하지 않는다면 static을 붙여라!!!








